<script>
	1,template(组件注册及嵌套)
	{
		import Vue from 'vue'

		var myHeaderChild = {
			template: '<p>小五是二货</p>'
		}

		var myHeader = {
			template: '<p><my-header-child></my-header-child>小白是傻屌</p>',
			components: {
				'my-header-child': myHeaderChild
			}
		}

		new Vue({
			el: '#app',
			data: {
				word: 'hello world'
			},
			components: {
				'my-header': myHeader
			}
		})

		//使用
		<div id="app">
	    <my-header></my-header>
	  </div>

	}

	2,data注意:以下写法可以避免组件多次使用时数据的污染
	{
		data: function() {
			return {
				five: '2货',
				white: '傻屌'
			}
		}
	}

	3, v-on:keydown.enter=""
	{
		enter键按下后触发
	}

	4,在vue里v-for循环的是本身,不是子元素。v-for(value, index)

	5,v-show相当于 display:none;而v-if 相当于删除了dom节点

	6,表单通过v-model绑定
	{
		v-model.number: 值为数字类型
		v-model.lazy: 完成后执行，不会跟着输入自动更新
		v-model.trim: 自动去掉输入的空格
	}

	7,计算属性computed: 相当于data,但能通过函数,用返回值进行赋值
	{
		计算属性是被缓存的，如果在方法中调用，每次调用都会从新计算
	}

	8,属性监听watch: 值被更改触发特定事件,参数可传可不传,用法比如在删除添加等操作触发相同的表单事件,用watch更方便
	{
		watch: {
			myval: function(value, oldvalue) {
				执行语句
			}
		}
	}

	9,组件注册: components中注册为驼峰式,而通过标签名引入时为小写字母与连接符“-”,vue2.0取消了这个限制

	10,通过is渲染组件,可以动态改变组件
	{
		'<p :is="comToRender"></p>'

		components: {
			comA,
			comB
		},
		data() {
			return {
				comToRender: 'com-a'
			}
		}
	}

	11,父组件向子组件props,子组件向父组件emit

	12,插槽slot
</script>
